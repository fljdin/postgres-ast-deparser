// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ast_helpers.create_trigger_distinct_fields 1`] = `
"CREATE TRIGGER mytrigger 
 BEFORE INSERT OR UPDATE ON myschema.mytable 
 FOR EACH ROW 
 WHEN (OLD.name IS DISTINCT FROM NEW.name OR OLD.description IS DISTINCT FROM NEW.description OR OLD.hi IS DISTINCT FROM NEW.hi) 
 EXECUTE PROCEDURE mytgfnschema.mytgfn ( );"
`;

exports[`ast_helpers.create_trigger_distinct_fields 2`] = `
"CREATE TRIGGER mytrigger 
 BEFORE INSERT OR UPDATE ON myschema.mytable 
 FOR EACH ROW 
 EXECUTE PROCEDURE mytgfnschema.mytgfn ( );"
`;

exports[`create trig stmt 1`] = `
"CREATE TRIGGER trigger_name 
 BEFORE UPDATE ON \\"schema-name\\".table_name 
 FOR EACH ROW 
 WHEN (NEW.field_name IS DISTINCT FROM OLD.field_name) 
 EXECUTE PROCEDURE trigger_function_schema.trigger_function ( )"
`;

exports[`create_function trigger 1`] = `
"CREATE FUNCTION v_schema_name.v_function_name ( ) RETURNS TRIGGER AS $LQLCODEZ$ 
 RETURN NEW; 
 $LQLCODEZ$ LANGUAGE plpgsql VOLATILE;"
`;

exports[`create_function trigger 2`] = `
"CREATE FUNCTION v_schema_name.v_function_name ( ) RETURNS TRIGGER AS $LQLCODEZ$ 
 NEW.field = (setweight(to_tsvector('pg_catalog.english', COALESCE(NEW.sub_head, '')), 'B') || (setweight(to_tsvector('pg_catalog.english', COALESCE(array_to_string(NEW.tags::citext[], ' '), '')), 'C') || (setweight(to_tsvector('pg_catalog.english', COALESCE(NEW.name, '')), 'B') || setweight(to_tsvector('pg_catalog.simple', COALESCE(NEW.name, '')), 'A'))));
RETURN NEW; 
 $LQLCODEZ$ LANGUAGE plpgsql VOLATILE;"
`;

exports[`create_trigger_stmt 1`] = `
Object {
  "create_trig_stmt": Object {
    "CreateTrigStmt": Object {
      "events": 16,
      "funcname": Array [
        Object {
          "String": Object {
            "str": "tg-schema",
          },
        },
        Object {
          "String": Object {
            "str": "tgname",
          },
        },
      ],
      "relation": Object {
        "RangeVar": Object {
          "inh": true,
          "relname": "mytable",
          "relpersistence": "p",
          "schemaname": "schema-name",
        },
      },
      "row": true,
      "timing": 2,
      "trigname": "trigger",
      "whenClause": Object {
        "A_Expr": Object {
          "kind": 3,
          "lexpr": Object {
            "ColumnRef": Object {
              "fields": Array [
                Object {
                  "String": Object {
                    "str": "old",
                  },
                },
                Object {
                  "String": Object {
                    "str": "field-b",
                  },
                },
              ],
            },
          },
          "name": Array [
            Object {
              "String": Object {
                "str": "=",
              },
            },
          ],
          "rexpr": Object {
            "ColumnRef": Object {
              "fields": Array [
                Object {
                  "String": Object {
                    "str": "new",
                  },
                },
                Object {
                  "String": Object {
                    "str": "field-b",
                  },
                },
              ],
            },
          },
        },
      },
    },
  },
}
`;

exports[`create_trigger_stmt deparse 1`] = `
Object {
  "deparse": "CREATE TRIGGER trigger 
 BEFORE UPDATE ON \\"schema-name\\".mytable 
 FOR EACH ROW 
 WHEN (OLD.\\"field-b\\" IS DISTINCT FROM NEW.\\"field-b\\") 
 EXECUTE PROCEDURE \\"tg-schema\\".tgname ( )",
}
`;

exports[`create_trigger_stmt deparse 2`] = `
Object {
  "deparse": "CREATE TRIGGER trigger 
 BEFORE UPDATE ON \\"schema-name\\".mytable 
 FOR EACH ROW 
 WHEN (OLD.\\"field-b\\" IS DISTINCT FROM NEW.\\"field-b\\") 
 EXECUTE PROCEDURE \\"tg-schema\\".tgname ( 'tg-schema', 'tgname' )",
}
`;

exports[`create_trigger_with_fields 1`] = `
"CREATE TRIGGER \\"my-trigger\\" 
 BEFORE INSERT OR UPDATE ON \\"my-schema\\".\\"my-table\\" 
 FOR EACH ROW 
 WHEN (OLD.name IS DISTINCT FROM NEW.name OR OLD.description IS DISTINCT FROM NEW.description) 
 EXECUTE PROCEDURE \\"my-tg-fn-schema\\".\\"my-tg-fn\\" ( );"
`;

exports[`create_trigger_with_fields and names wo quotes 1`] = `
"CREATE TRIGGER mytrigger 
 BEFORE INSERT OR UPDATE ON myschema.mytable 
 FOR EACH ROW 
 WHEN (OLD.name IS DISTINCT FROM NEW.name OR OLD.description IS DISTINCT FROM NEW.description) 
 EXECUTE PROCEDURE mytgfnschema.mytgfn ( );"
`;

exports[`create_trigger_with_fields w params 1`] = `
"CREATE TRIGGER \\"my-trigger\\" 
 BEFORE INSERT OR UPDATE ON \\"my-schema\\".\\"my-table\\" 
 FOR EACH ROW 
 WHEN (OLD.name IS DISTINCT FROM NEW.name OR OLD.description IS DISTINCT FROM NEW.description) 
 EXECUTE PROCEDURE \\"my-tg-fn-schema\\".\\"my-tg-fn\\" ( 'name', 'description' );"
`;

exports[`drop_trigger 1`] = `"DROP TRIGGER mytrigger ON myschema.mytable;"`;
